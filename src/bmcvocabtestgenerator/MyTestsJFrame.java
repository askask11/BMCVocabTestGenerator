/*
 * Author: jianqing
 * Date: Jun 23, 2020
 * Description: This document is created for
 */
package bmcvocabtestgenerator;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jianqing
 */
public class MyTestsJFrame extends javax.swing.JFrame
{

    /**
     * Creates new form MyTestsJFrame
     */
    public MyTestsJFrame()
    {
        initComponents();
        postInit();
    }

    /**
     * Code to execute after init process.
     */
    private void postInit()
    {
        //show message
        //messageField.setText("Loading...");
        msg("Loading...");
        //load the list in a new thread.
        Thread loadTr = new Thread(() ->
        {
            loadTestListToJTable();
        });
        loadTr.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        messageField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jMenuItem1.setText("View Test");
        jMenuItem1.setToolTipText("You can see the test in a new window.");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Delete Test");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("My Tests");

        messageField.setEditable(false);
        messageField.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        messageField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        messageField.setText("Right-Click");
        messageField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                messageFieldActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Test ID", "Test Range", "Test Date", "Is Completed"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0)
        {
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(messageField))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(268, 268, 268)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_messageFieldActionPerformed
    {//GEN-HEADEREND:event_messageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageFieldActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        //view test
        //check if user has selected one
        int selectedIndex = jTable1.getSelectedRow();
        
        if (selectedIndex != -1)
        {
            //ask again for confirmation
            int conf = JOptionPane.showConfirmDialog(this, "Are you sure you want to view this test?", "View Test", JOptionPane.YES_NO_OPTION);
            if (conf == JOptionPane.YES_OPTION)
            {
                msg("Loading...");
                //get selected test id
                //int selectId = Integer.parseInt(jList1.getSelectedValue());
                int selectedId = testInfos.get(selectedIndex).getTestId();
                //create a new thread to do the work so the frame doesn't stuck.
                Thread viewTestThread = new Thread(()->{viewSelectedTest(selectedId);});
                
                //start to run the thread
                viewTestThread.start();
                
            }
        }else
        {
            msg("No Select");
            JOptionPane.showMessageDialog(this, "Please select a test to proceed.");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem2ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //delete test
        int selectedIndex = jTable1.getSelectedRow();//jList1.getSelectedIndex();
        if(selectedIndex!=-1)
        {
            int con = JOptionPane.showConfirmDialog(this, "Are you sure to delete this test?", "Message", JOptionPane.YES_NO_OPTION);
            if(con==JOptionPane.OK_OPTION)
            {
                int testId =testInfos.get(selectedIndex).getTestId();//= Integer.parseInt(jList1.getSelectedValue());
                Thread deleteThread = new Thread(()->{deleteSelectedTest(testId);});
                deleteThread.start();
            }
        }else
        {
            JOptionPane.showMessageDialog(this, "Please select a test to delete");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Delete the test ID user selected, then refresh table(invoke load method).
     * @param testId 
     */
    private void deleteSelectedTest(int testId)
    {
        try(DatabaseConnector dbConn = DatabaseConnector.getDefaultInstance())
        {
            //delete it from the database
            int rows = dbConn.deleteTestFromDatabaseByTestId(testId);
            if(rows>0)
            {
                dbConn.deleteFromTestInfo(testId);
            }
            msg(rows + " question" + (rows>1?"":"s") + " has been deleted.");
            loadTestListToJTable();//refresh table
        } catch (Exception e)
        {
            Warning.createWarningDialog(e);
            msg("error");
        }
    }
    
    
    private void viewSelectedTest(int testId)
    {
        List<Vocabulary> vocabList;
        try (DatabaseConnector db = DatabaseConnector.getDefaultInstance())
        {
            vocabList = db.selectFromTestTableByTestId(testId);
            new TestJFrame(vocabList, testId).setVisible(true);
            msg("Test Opened");
        } catch (Exception e)
        {
            msg("error");
            Warning.createWarningDialog(e);
        }
    }

    /**
     * Load the test list to the JList.
     */
    private void loadTestListToJTable()
    {
        try (DatabaseConnector dbConn = DatabaseConnector.getDefaultInstance())
        {
            //get list data from database
            //object[row][col]
            //ArrayList<String> data = dbConn.selectFromTestTableDistTestId();
            testInfos = dbConn.selectFromTestInfo();
//            String[] listData = new String[data.size()];
            Object[][] tableData = new Object[testInfos.size()][4];
            for (int i = 0; i < testInfos.size(); i++)
            {
                //listData[i] = data.get(i);
                TestInfo row = testInfos.get(i);
                //TODO: WRITE CODE INTO THE JTABLE, THEN SET COMPONENT POPUP MENU,
                tableData[i][0]=row.getTestId();
                tableData[i][1]=row.getVocabRange();
                tableData[i][2]=TimeConverter.formatDateTime(row.getGenerateTime());
                tableData[i][3]=(row.isCompleted()?"Yes":"No");
            }
            // put the data to the jlist
            DefaultTableModel model = new DefaultTableModel(tableData, new String[]{"Test ID","Test Range","Test Date","Is Completed"});
            
           
            //jList1.setListData(listData);

            jTable1.setModel(model);
           jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
           
            msg("Tests Loaded.");
            jTable1.setComponentPopupMenu(jPopupMenu1);
        } catch (Exception e)
        {
            //ex handling
            Warning.createWarningDialog(e);
            msg("There is an error");
            e.printStackTrace();
        }
    }

    /**
     * Render a message in user's message text field.
     *
     * @param txt
     */
    private void msg(String txt)
    {
        // messageField.setColor
        messageField.setText(txt);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MyTestsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MyTestsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MyTestsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MyTestsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MyTestsJFrame().setVisible(true);
            }
        });
    }

    private ArrayList<TestInfo> testInfos=null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField messageField;
    // End of variables declaration//GEN-END:variables
}
